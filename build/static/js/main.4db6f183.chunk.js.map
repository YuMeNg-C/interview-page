{"version":3,"sources":["App.js","hooks/index.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","key","render","text","App","props","useState","baseUrl","list","setList","top","setTop","setDrop","fetchCode","setFetchCode","useEffect","a","axios","get","res","data","callback","delay","drop","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","style","float","paddingRight","onMouseOver","onMouseLeave","showHeader","dataSource","pagination","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAMMA,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACEJ,MAAO,eACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,KACXC,IAAK,OAmDMG,MA/Cf,YAAuB,IAATC,EAAQ,EAARA,MAAQ,EAEUC,mBAAS,6CAFnB,mBAEbC,EAFa,aAGID,mBAAS,KAHb,mBAGbE,EAHa,KAGPC,EAHO,OAIEH,mBAAS,GAJX,mBAIbI,EAJa,KAIRC,EAJQ,OAKIL,oBAAS,GALb,mBAKPM,GALO,aAMcN,mBAAS,WANvB,mBAMbO,EANa,KAMFC,EANE,KA0BpB,OAlBAC,oBAAS,sBAAC,4BAAAC,EAAA,sEACUC,IAAMC,IAAIX,GADpB,OACFY,EADE,OAERV,EAAQU,EAAIC,MACZN,EAAa,OAHL,2CAIP,ICnCU,SAAqBO,EAAUC,EAAOC,GACnD,IAAMC,EAAgBC,mBAEtBV,qBAAU,WACRS,EAAcE,QAAUL,KAG1BN,qBAAU,WAIR,IAAIY,EAAKC,aAHT,WACEJ,EAAcE,YAEWJ,GAC3B,OAAO,kBAAMO,cAAcF,MAC1B,CAACL,IDwBJQ,EAAY,WAAQnB,EAAOD,EAAM,KAAK,KAapC,yBAAKqB,UAAU,OACb,yBAAKA,UAAU,UAAf,2BAEE,0BAAMC,MAAO,CAACC,MAAO,QAASC,aAAc,SAA5C,iBAEA,yBAAKH,UAAU,eAAeC,MAAO,CAACtB,OAAMyB,YAhBpC,WACZvB,GAAQ,IAe4DwB,aAZvD,WACbxB,GAAQ,KAaa,OAAbC,EACA,kBAAC,IAAD,CACEwB,YAAY,EACZC,WAAYjC,GAAgBG,EAC5BV,QAASA,EACTyC,YAAY,IACX,QErDKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAAS3C,OACH,kBAAC,IAAM4C,WAAP,KACC,kBAAC,EAAD,OAELC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4db6f183.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { List, Avatar, Table, Spin } from 'antd'\nimport axios from 'axios'\nimport useInterval from './hooks/index'\nimport './App.css';\n\nconst columns = [\n  {\n    title: '姓名',\n    dataIndex: 'title',\n    key: 'title',\n    render: text => <a>{text}</a>,\n  },\n  {\n    title: '住址',\n    dataIndex: 'body',\n    key: 'body',\n  },\n  {\n    title: '年龄',\n    dataIndex: 'id',\n    key: 'id',\n  }\n]\n\nfunction App({props}) {\n\n  const [baseUrl, setBaseUrl] = useState('http://jsonplaceholder.typicode.com/posts')\n  const [list, setList] = useState([])\n  const [top, setTop] = useState(0)\n  const [drop, setDrop] = useState(true)\n  const [fetchCode, setFetchCode] = useState('pending')\n\n  useEffect(async () => {\n    const res = await axios.get(baseUrl)\n    setList(res.data)\n    setFetchCode('200')\n  }, [])\n\n  useInterval(() => { setTop(top - 2)}, 100, drop)\n\n  const inDom = () => {\n    setDrop(false)\n  }\n\n  const outDom = () => {\n    setDrop(true)\n  }\n\n  \n  \n  return (\n    <div className=\"App\">\n      <div className='header'>\n        最新职位\n        <span style={{float: 'right', paddingRight: '10px'}}>更多</span>\n      </div>\n        <div className='list-wrapper' style={{top}} onMouseOver={inDom} onMouseLeave={outDom}>\n          {\n            fetchCode == \"200\" ? \n            <Table\n              showHeader={true}\n              dataSource={props ? props : list }\n              columns={columns}\n              pagination={false}\n          /> : null\n          }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useRef, useEffect } from 'react'\r\n\r\nexport default function useInterval(callback, delay, drop) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    let id = setInterval(tick, delay);\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router,Route,Switch} from \"react-router-dom\";\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n      <React.StrictMode>\n       <App />\n      </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}